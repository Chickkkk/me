[{"data":1,"prerenderedAt":1305},["ShallowReactive",2],{"/blog/202504/intersectionobserver-watch-dom":3},{"id":4,"title":5,"body":6,"date":1296,"description":1297,"extension":1298,"image":1297,"meta":1299,"navigation":557,"path":1300,"qk":1301,"seo":1302,"stem":1303,"tags":1297,"__hash__":1304},"blog/blog/202504/02.IntersectionObserver-watch-dom.md","IntersectionObserver观察元素是否可见",{"type":7,"value":8,"toc":1292},"minimal",[9,13,16,20,27,30,50,99,151,157,160,295,322,656,663,666,675,678,682,819,1086,1089,1092,1137,1288],[10,11,5],"h1",{"id":12},"intersectionobserver观察元素是否可见",[10,14,15],{"id":15},"说明",[17,18,19],"p",{},"网页开发时，常常需要了解某个元素是否进入了\"视口\"（viewport），即用户能不能看到它，IntersectionObserver API，可以自动\"观察\"元素是否可见，Chrome 51+ 已经支持。由于可见（visible）的本质是，目标元素与视口产生一个交叉区，所以这个 API 叫做\"交叉观察器\"。",[17,21,22],{},[23,24],"img",{"alt":25,"src":26},"","https://cloud.qkun.fun/fun/article/1746428536211001.gif",[10,28,29],{"id":29},"创建",[31,32,33],"ol",{},[34,35,36,37,41,42,45,46,49],"li",{},"创建一个 IntersectionObserver 对象，并传入相应参数和回调用函数，该回调函数将会在目标(",[38,39,40],"code",{},"target",")元素和根(",[38,43,44],{},"root",")元素的交集大小超过阈值(",[38,47,48],{},"threshold",")规定的大小时候被执行。",[51,52,56],"pre",{"className":53,"code":54,"language":55,"meta":25,"style":25},"language-js shiki shiki-themes github-dark vitesse-dark","const ob = new IntersectionObserver(callback, option)\n","js",[38,57,58],{"__ignoreMap":25},[59,60,63,67,71,75,78,82,86,90,93,96],"span",{"class":61,"line":62},"line",1,[59,64,66],{"class":65},"s8I54","const",[59,68,70],{"class":69},"sXTEK"," ob",[59,72,74],{"class":73},"soRP2"," =",[59,76,77],{"class":65}," new",[59,79,81],{"class":80},"scd8n"," IntersectionObserver",[59,83,85],{"class":84},"sybYZ","(",[59,87,89],{"class":88},"sVbU4","callback",[59,91,92],{"class":84},",",[59,94,95],{"class":88}," option",[59,97,98],{"class":84},")\n",[100,101,102,110],"blockquote",{},[31,103,104,107],{},[34,105,106],{},"callback: 交叉改变后运行： 交叉/不交叉 => 不交叉/交叉",[34,108,109],{},"option: 配置项目",[111,112,113,125,142],"ul",{},[34,114,115,117,118,120,121,124],{},[38,116,44],{},": 指定根(",[38,119,44],{},")元素，用于检查目标的可见性。必须是目标元素的父级元素。如果未指定或者为",[38,122,123],{},"null","，则默认为浏览器视窗。",[34,126,127,130,131,133,134,137,138,141],{},[38,128,129],{},"rootMargin",": 根(",[38,132,44],{},")元素的外边距。类似于 CSS 中的 margin 属性，比如 \"10px 20px 30px 40px\" (top, right, bottom, left)。如果有指定 root 参数，则 rootMargin 也可以使用百分比来取值。该属性值是用作 root 元素和 target 发生交集时候的计算交集的区域范围，使用该属性可以控制 root 元素每一边的",[38,135,136],{},"收缩","或者",[38,139,140],{},"扩张","。默认值为 0。",[34,143,144,146,147,150],{},[38,145,48],{},": 阈值！可以是单一的 number 也可以是 number 数组，target 元素和 root 元素相交程度达到该值的时候 IntersectionObserver 注册的回调函数将会被执行。如果你只是想要探测当 target 元素的在 root 元素中的可见性超过 50%的时候，你可以指定该属性值为 0.5。如果你想要 target 元素在 root 元素的可见程度每多 25%就执行一次回调，那么你可以指定一个数组",[59,148,149],{},"0, 0.25, 0.5, 0.75, 1","。默认值是 0(意味着只要有一个 target 像素出现在 root 元素中，回调函数将会被执行)。该值为 1.0 含义是当 target 完全出现在 root 元素中时候 回调才会被执行。",[31,152,154],{"start":153},2,[34,155,156],{},"IntersectionObserver Entry",[17,158,159],{},"IntersectionObserverEntry 对象提供了目标元素与跟元素相交的详细信息。他有如下几个属性。",[51,161,165],{"className":162,"code":163,"language":164,"meta":25,"style":25},"language-typescript shiki shiki-themes github-dark vitesse-dark","interface IntersectionObserverEntry {\n  readonly attribute DOMHighResTimeStamp time;\n  readonly attribute DOMRectReadOnly? rootBounds;\n  readonly attribute DOMRectReadOnly boundingClientRect;\n  readonly attribute DOMRectReadOnly intersectionRect;\n  readonly attribute boolean isIntersecting;\n  readonly attribute double intersectionRatio;\n  readonly attribute Element target;\n};\n","typescript",[38,166,167,179,197,216,230,244,259,274,289],{"__ignoreMap":25},[59,168,169,172,176],{"class":61,"line":62},[59,170,171],{"class":65},"interface",[59,173,175],{"class":174},"s3iJD"," IntersectionObserverEntry",[59,177,178],{"class":84}," {\n",[59,180,181,184,187,190,194],{"class":61,"line":153},[59,182,183],{"class":65},"  readonly",[59,185,186],{"class":88}," attribute",[59,188,189],{"class":88}," DOMHighResTimeStamp",[59,191,193],{"class":192},"sSfpy"," time",[59,195,196],{"class":84},";\n",[59,198,200,202,204,207,210,213],{"class":61,"line":199},3,[59,201,183],{"class":65},[59,203,186],{"class":88},[59,205,206],{"class":88}," DOMRectReadOnly",[59,208,209],{"class":65},"?",[59,211,212],{"class":88}," rootBounds",[59,214,196],{"class":215},"s3cgb",[59,217,219,221,223,225,228],{"class":61,"line":218},4,[59,220,183],{"class":88},[59,222,186],{"class":88},[59,224,206],{"class":88},[59,226,227],{"class":88}," boundingClientRect",[59,229,196],{"class":215},[59,231,233,235,237,239,242],{"class":61,"line":232},5,[59,234,183],{"class":88},[59,236,186],{"class":88},[59,238,206],{"class":88},[59,240,241],{"class":88}," intersectionRect",[59,243,196],{"class":215},[59,245,247,249,251,254,257],{"class":61,"line":246},6,[59,248,183],{"class":88},[59,250,186],{"class":88},[59,252,253],{"class":88}," boolean",[59,255,256],{"class":88}," isIntersecting",[59,258,196],{"class":215},[59,260,262,264,266,269,272],{"class":61,"line":261},7,[59,263,183],{"class":88},[59,265,186],{"class":88},[59,267,268],{"class":88}," double",[59,270,271],{"class":88}," intersectionRatio",[59,273,196],{"class":215},[59,275,277,279,281,284,287],{"class":61,"line":276},8,[59,278,183],{"class":88},[59,280,186],{"class":88},[59,282,283],{"class":88}," Element",[59,285,286],{"class":88}," target",[59,288,196],{"class":215},[59,290,292],{"class":61,"line":291},9,[59,293,294],{"class":215},"};\n",[111,296,297,300,303,306,309,316,319],{},[34,298,299],{},"time：发生相交到相应的时间，毫秒。",[34,301,302],{},"rootBounds：根元素矩形区域的信息，如果没有设置根元素则返回 null，图中蓝色部分区域。",[34,304,305],{},"boundingClientRect：目标元素的矩形区域的信息，图中黑色边框的区域。",[34,307,308],{},"intersectionRect：目标元素与视口（或根元素）的交叉区域的信息，图中蓝色方块和粉红色方块相交的区域。",[34,310,311,312],{},"isIntersecting：",[313,314,315],"strong",{},"目标元素与根元素是否相交(满足预设的阈值条件)",[34,317,318],{},"intersectionRatio：目标元素与视口（或根元素）的相交比例。",[34,320,321],{},"target：目标元素，图中黑色边框的部分。",[51,323,325],{"className":53,"code":324,"language":55,"meta":25,"style":25},"var observer = new IntersectionObserver((entries) => {\n  for (const entry of entries) {\n    console.log(entry.time) // 发生变化的时间\n    console.log(entry.rootBounds) // 根元素的矩形区域的信息\n    console.log(entry.boundingClientRect) // 目标元素的矩形区域的信息\n    console.log(entry.isIntersection) // 目标元素与视口（或根元素）是否相交(满足预设的阈值条件)\n    console.log(entry.intersectionRect) // 目标元素与视口（或根元素）的交叉区域的信息\n    console.log(entry.intersectionRatio) // 目标元素与视口（或根元素）的相交比例\n    console.log(entry.target) // 被观察的目标元素\n  }\n}, {})\n\n// 开始观察某个目标元素\nobserver.observe(target)\n\n// 停止观察某个目标元素\nobserver.unobserve(target)\n\n// 关闭监视器\nobserver.disconnect()\n\n// 获取所有 IntersectionObserver 观察的 targets\nobserver.takeRecords()\n",[38,326,327,355,379,406,428,450,472,494,516,537,543,552,559,565,582,587,593,609,614,620,633,638,644],{"__ignoreMap":25},[59,328,329,332,335,337,339,341,344,347,350,353],{"class":61,"line":62},[59,330,331],{"class":65},"var",[59,333,334],{"class":88}," observer",[59,336,74],{"class":73},[59,338,77],{"class":65},[59,340,81],{"class":80},[59,342,343],{"class":84},"((",[59,345,346],{"class":192},"entries",[59,348,349],{"class":84},")",[59,351,352],{"class":73}," =>",[59,354,178],{"class":84},[59,356,357,361,364,366,369,372,375,377],{"class":61,"line":153},[59,358,360],{"class":359},"scBr_","  for",[59,362,363],{"class":84}," (",[59,365,66],{"class":65},[59,367,368],{"class":69}," entry",[59,370,371],{"class":65}," of",[59,373,374],{"class":88}," entries",[59,376,349],{"class":84},[59,378,178],{"class":84},[59,380,381,384,387,390,392,395,397,400,402],{"class":61,"line":199},[59,382,383],{"class":88},"    console",[59,385,386],{"class":84},".",[59,388,389],{"class":80},"log",[59,391,85],{"class":84},[59,393,394],{"class":88},"entry",[59,396,386],{"class":84},[59,398,399],{"class":88},"time",[59,401,349],{"class":84},[59,403,405],{"class":404},"sKXKF"," // 发生变化的时间\n",[59,407,408,410,412,414,416,418,420,423,425],{"class":61,"line":218},[59,409,383],{"class":88},[59,411,386],{"class":84},[59,413,389],{"class":80},[59,415,85],{"class":84},[59,417,394],{"class":88},[59,419,386],{"class":84},[59,421,422],{"class":88},"rootBounds",[59,424,349],{"class":84},[59,426,427],{"class":404}," // 根元素的矩形区域的信息\n",[59,429,430,432,434,436,438,440,442,445,447],{"class":61,"line":232},[59,431,383],{"class":88},[59,433,386],{"class":84},[59,435,389],{"class":80},[59,437,85],{"class":84},[59,439,394],{"class":88},[59,441,386],{"class":84},[59,443,444],{"class":88},"boundingClientRect",[59,446,349],{"class":84},[59,448,449],{"class":404}," // 目标元素的矩形区域的信息\n",[59,451,452,454,456,458,460,462,464,467,469],{"class":61,"line":246},[59,453,383],{"class":88},[59,455,386],{"class":84},[59,457,389],{"class":80},[59,459,85],{"class":84},[59,461,394],{"class":88},[59,463,386],{"class":84},[59,465,466],{"class":88},"isIntersection",[59,468,349],{"class":84},[59,470,471],{"class":404}," // 目标元素与视口（或根元素）是否相交(满足预设的阈值条件)\n",[59,473,474,476,478,480,482,484,486,489,491],{"class":61,"line":261},[59,475,383],{"class":88},[59,477,386],{"class":84},[59,479,389],{"class":80},[59,481,85],{"class":84},[59,483,394],{"class":88},[59,485,386],{"class":84},[59,487,488],{"class":88},"intersectionRect",[59,490,349],{"class":84},[59,492,493],{"class":404}," // 目标元素与视口（或根元素）的交叉区域的信息\n",[59,495,496,498,500,502,504,506,508,511,513],{"class":61,"line":276},[59,497,383],{"class":88},[59,499,386],{"class":84},[59,501,389],{"class":80},[59,503,85],{"class":84},[59,505,394],{"class":88},[59,507,386],{"class":84},[59,509,510],{"class":88},"intersectionRatio",[59,512,349],{"class":84},[59,514,515],{"class":404}," // 目标元素与视口（或根元素）的相交比例\n",[59,517,518,520,522,524,526,528,530,532,534],{"class":61,"line":291},[59,519,383],{"class":88},[59,521,386],{"class":84},[59,523,389],{"class":80},[59,525,85],{"class":84},[59,527,394],{"class":88},[59,529,386],{"class":84},[59,531,40],{"class":88},[59,533,349],{"class":84},[59,535,536],{"class":404}," // 被观察的目标元素\n",[59,538,540],{"class":61,"line":539},10,[59,541,542],{"class":84},"  }\n",[59,544,546,549],{"class":61,"line":545},11,[59,547,548],{"class":84},"},",[59,550,551],{"class":84}," {})\n",[59,553,555],{"class":61,"line":554},12,[59,556,558],{"emptyLinePlaceholder":557},true,"\n",[59,560,562],{"class":61,"line":561},13,[59,563,564],{"class":404},"// 开始观察某个目标元素\n",[59,566,568,571,573,576,578,580],{"class":61,"line":567},14,[59,569,570],{"class":88},"observer",[59,572,386],{"class":84},[59,574,575],{"class":80},"observe",[59,577,85],{"class":84},[59,579,40],{"class":88},[59,581,98],{"class":84},[59,583,585],{"class":61,"line":584},15,[59,586,558],{"emptyLinePlaceholder":557},[59,588,590],{"class":61,"line":589},16,[59,591,592],{"class":404},"// 停止观察某个目标元素\n",[59,594,596,598,600,603,605,607],{"class":61,"line":595},17,[59,597,570],{"class":88},[59,599,386],{"class":84},[59,601,602],{"class":80},"unobserve",[59,604,85],{"class":84},[59,606,40],{"class":88},[59,608,98],{"class":84},[59,610,612],{"class":61,"line":611},18,[59,613,558],{"emptyLinePlaceholder":557},[59,615,617],{"class":61,"line":616},19,[59,618,619],{"class":404},"// 关闭监视器\n",[59,621,623,625,627,630],{"class":61,"line":622},20,[59,624,570],{"class":88},[59,626,386],{"class":84},[59,628,629],{"class":80},"disconnect",[59,631,632],{"class":84},"()\n",[59,634,636],{"class":61,"line":635},21,[59,637,558],{"emptyLinePlaceholder":557},[59,639,641],{"class":61,"line":640},22,[59,642,643],{"class":404},"// 获取所有 IntersectionObserver 观察的 targets\n",[59,645,647,649,651,654],{"class":61,"line":646},23,[59,648,570],{"class":88},[59,650,386],{"class":84},[59,652,653],{"class":80},"takeRecords",[59,655,632],{"class":84},[17,657,658,659,662],{},"请留意，你注册的回调函数将会在主线程中被执行。所以该函数执行速度要尽可能的快。如果有一些耗时的操作需要执行，建议使用 ",[38,660,661],{},"Window.requestIdleCallback()"," 方法。",[17,664,665],{},"所有区域均被 Intersection Observer API 当做一个矩形看待。如果元素是不规则的图形也将会被看成一个包含元素所有区域的最小矩形，相似的，如果元素发生的交集部分不是一个矩形，那么也会被看作是一个包含他所有交集区域的最小矩形。",[17,667,668,669,671,672,674],{},"这个有助于理解 IntersectionObserverEntry 的属性，IntersectionObserverEntry 用于描述 ",[38,670,40],{}," 和 ",[38,673,44],{}," 的交集。",[10,676,677],{"id":677},"应用",[679,680,681],"h2",{"id":681},"图片懒加载",[51,683,687],{"className":684,"code":685,"language":686,"meta":25,"style":25},"language-html shiki shiki-themes github-dark vitesse-dark","\u003C!-- html -->\n\u003Cimg src='default.png' data-src=\"xxxxx\" />\n\u003Cimg src='default.png' data-src=\"xxxxx\" />\n\u003Cimg src='default.png' data-src=\"xxxxx\" />\n\u003Cimg src='default.png' data-src=\"xxxxx\" />\n","html",[38,688,689,694,735,763,791],{"__ignoreMap":25},[59,690,691],{"class":61,"line":62},[59,692,693],{"class":404},"\u003C!-- html -->\n",[59,695,696,699,702,706,709,713,717,719,722,724,727,730,732],{"class":61,"line":153},[59,697,698],{"class":84},"\u003C",[59,700,23],{"class":701},"s-bR0",[59,703,705],{"class":704},"skT8L"," src",[59,707,708],{"class":84},"=",[59,710,712],{"class":711},"sajHj","'",[59,714,716],{"class":715},"sx1Rn","default.png",[59,718,712],{"class":711},[59,720,721],{"class":704}," data-src",[59,723,708],{"class":84},[59,725,726],{"class":711},"\"",[59,728,729],{"class":715},"xxxxx",[59,731,726],{"class":711},[59,733,734],{"class":84}," />\n",[59,736,737,739,741,743,745,747,749,751,753,755,757,759,761],{"class":61,"line":199},[59,738,698],{"class":84},[59,740,23],{"class":701},[59,742,705],{"class":704},[59,744,708],{"class":84},[59,746,712],{"class":711},[59,748,716],{"class":715},[59,750,712],{"class":711},[59,752,721],{"class":704},[59,754,708],{"class":84},[59,756,726],{"class":711},[59,758,729],{"class":715},[59,760,726],{"class":711},[59,762,734],{"class":84},[59,764,765,767,769,771,773,775,777,779,781,783,785,787,789],{"class":61,"line":218},[59,766,698],{"class":84},[59,768,23],{"class":701},[59,770,705],{"class":704},[59,772,708],{"class":84},[59,774,712],{"class":711},[59,776,716],{"class":715},[59,778,712],{"class":711},[59,780,721],{"class":704},[59,782,708],{"class":84},[59,784,726],{"class":711},[59,786,729],{"class":715},[59,788,726],{"class":711},[59,790,734],{"class":84},[59,792,793,795,797,799,801,803,805,807,809,811,813,815,817],{"class":61,"line":232},[59,794,698],{"class":84},[59,796,23],{"class":701},[59,798,705],{"class":704},[59,800,708],{"class":84},[59,802,712],{"class":711},[59,804,716],{"class":715},[59,806,712],{"class":711},[59,808,721],{"class":704},[59,810,708],{"class":84},[59,812,726],{"class":711},[59,814,729],{"class":715},[59,816,726],{"class":711},[59,818,734],{"class":84},[51,820,822],{"className":53,"code":821,"language":55,"meta":25,"style":25},"// js\nconst ob = new IntersectionObserver(\n  entries => {\n    for (const entry of entries) {\n      if (entry.isIntersecting) {\n        const img = entry.target;\n        img.src = img.dataset.src;\n        ob.unobserve(img);\n      }\n    }\n  },\n  {\n    root: null,\n    rootMargin: 0,\n    threshold: 0\n  }\n);\n\nconst imgs = document.querySelectorAll('img[data-src]')\nimgs.forEach(img => {\n  ob.observe(img)\n})\n",[38,823,824,829,844,853,872,890,908,933,949,954,959,964,969,985,998,1008,1012,1016,1020,1048,1066,1081],{"__ignoreMap":25},[59,825,826],{"class":61,"line":62},[59,827,828],{"class":404},"// js\n",[59,830,831,833,835,837,839,841],{"class":61,"line":153},[59,832,66],{"class":65},[59,834,70],{"class":69},[59,836,74],{"class":73},[59,838,77],{"class":65},[59,840,81],{"class":80},[59,842,843],{"class":84},"(\n",[59,845,846,849,851],{"class":61,"line":199},[59,847,848],{"class":192},"  entries",[59,850,352],{"class":73},[59,852,178],{"class":84},[59,854,855,858,860,862,864,866,868,870],{"class":61,"line":218},[59,856,857],{"class":359},"    for",[59,859,363],{"class":84},[59,861,66],{"class":65},[59,863,368],{"class":69},[59,865,371],{"class":65},[59,867,374],{"class":88},[59,869,349],{"class":84},[59,871,178],{"class":84},[59,873,874,877,879,881,883,886,888],{"class":61,"line":232},[59,875,876],{"class":359},"      if",[59,878,363],{"class":84},[59,880,394],{"class":88},[59,882,386],{"class":84},[59,884,885],{"class":88},"isIntersecting",[59,887,349],{"class":84},[59,889,178],{"class":84},[59,891,892,895,898,900,902,904,906],{"class":61,"line":246},[59,893,894],{"class":65},"        const",[59,896,897],{"class":69}," img",[59,899,74],{"class":73},[59,901,368],{"class":88},[59,903,386],{"class":84},[59,905,40],{"class":88},[59,907,196],{"class":84},[59,909,910,913,915,918,920,922,924,927,929,931],{"class":61,"line":261},[59,911,912],{"class":88},"        img",[59,914,386],{"class":84},[59,916,917],{"class":88},"src",[59,919,74],{"class":73},[59,921,897],{"class":88},[59,923,386],{"class":84},[59,925,926],{"class":88},"dataset",[59,928,386],{"class":84},[59,930,917],{"class":88},[59,932,196],{"class":84},[59,934,935,938,940,942,944,946],{"class":61,"line":276},[59,936,937],{"class":88},"        ob",[59,939,386],{"class":84},[59,941,602],{"class":80},[59,943,85],{"class":84},[59,945,23],{"class":88},[59,947,948],{"class":84},");\n",[59,950,951],{"class":61,"line":291},[59,952,953],{"class":84},"      }\n",[59,955,956],{"class":61,"line":539},[59,957,958],{"class":84},"    }\n",[59,960,961],{"class":61,"line":545},[59,962,963],{"class":84},"  },\n",[59,965,966],{"class":61,"line":554},[59,967,968],{"class":84},"  {\n",[59,970,971,975,978,982],{"class":61,"line":561},[59,972,974],{"class":973},"sqmIX","    root",[59,976,977],{"class":84},":",[59,979,981],{"class":980},"smuiB"," null",[59,983,984],{"class":84},",\n",[59,986,987,990,992,996],{"class":61,"line":567},[59,988,989],{"class":973},"    rootMargin",[59,991,977],{"class":84},[59,993,995],{"class":994},"svno3"," 0",[59,997,984],{"class":84},[59,999,1000,1003,1005],{"class":61,"line":584},[59,1001,1002],{"class":973},"    threshold",[59,1004,977],{"class":84},[59,1006,1007],{"class":994}," 0\n",[59,1009,1010],{"class":61,"line":589},[59,1011,542],{"class":84},[59,1013,1014],{"class":61,"line":595},[59,1015,948],{"class":84},[59,1017,1018],{"class":61,"line":611},[59,1019,558],{"emptyLinePlaceholder":557},[59,1021,1022,1024,1027,1029,1032,1034,1037,1039,1041,1044,1046],{"class":61,"line":616},[59,1023,66],{"class":65},[59,1025,1026],{"class":69}," imgs",[59,1028,74],{"class":73},[59,1030,1031],{"class":88}," document",[59,1033,386],{"class":84},[59,1035,1036],{"class":80},"querySelectorAll",[59,1038,85],{"class":84},[59,1040,712],{"class":711},[59,1042,1043],{"class":715},"img[data-src]",[59,1045,712],{"class":711},[59,1047,98],{"class":84},[59,1049,1050,1053,1055,1058,1060,1062,1064],{"class":61,"line":622},[59,1051,1052],{"class":88},"imgs",[59,1054,386],{"class":84},[59,1056,1057],{"class":80},"forEach",[59,1059,85],{"class":84},[59,1061,23],{"class":192},[59,1063,352],{"class":73},[59,1065,178],{"class":84},[59,1067,1068,1071,1073,1075,1077,1079],{"class":61,"line":635},[59,1069,1070],{"class":88},"  ob",[59,1072,386],{"class":84},[59,1074,575],{"class":80},[59,1076,85],{"class":84},[59,1078,23],{"class":88},[59,1080,98],{"class":84},[59,1082,1083],{"class":61,"line":640},[59,1084,1085],{"class":84},"})\n",[679,1087,1088],{"id":1088},"下拉加载更多",[17,1090,1091],{},"方式：在dom元素之下存在一个加载动画。当加载动画出现在视口中，继续添加dom元素",[51,1093,1095],{"className":684,"code":1094,"language":686,"meta":25,"style":25},"  \u003Cdiv>\n    // 省略其他dom元素...\n  \u003C/div>\n  \u003Cloading>\u003C/loading>\n",[38,1096,1097,1108,1113,1122],{"__ignoreMap":25},[59,1098,1099,1102,1105],{"class":61,"line":62},[59,1100,1101],{"class":84},"  \u003C",[59,1103,1104],{"class":701},"div",[59,1106,1107],{"class":84},">\n",[59,1109,1110],{"class":61,"line":153},[59,1111,1112],{"class":215},"    // 省略其他dom元素...\n",[59,1114,1115,1118,1120],{"class":61,"line":199},[59,1116,1117],{"class":84},"  \u003C/",[59,1119,1104],{"class":701},[59,1121,1107],{"class":84},[59,1123,1124,1126,1130,1133,1135],{"class":61,"line":218},[59,1125,1101],{"class":84},[59,1127,1129],{"class":1128},"sRd-J","loading",[59,1131,1132],{"class":84},">\u003C/",[59,1134,1129],{"class":1128},[59,1136,1107],{"class":84},[51,1138,1140],{"className":53,"code":1139,"language":55,"meta":25,"style":25},"const ob = new IntersectionObserver(\n  entries => {\n    if (entries[0].isIntersecting) {\n      // ...添加doms\n    }\n  },\n  {\n    root: null,\n    rootMargin: '0',\n    threshold: 0\n  }\n);\nconst loading = document.querySelector('.loading');\nob.observe(loading);\n",[38,1141,1142,1156,1164,1188,1193,1197,1201,1205,1215,1230,1238,1242,1246,1273],{"__ignoreMap":25},[59,1143,1144,1146,1148,1150,1152,1154],{"class":61,"line":62},[59,1145,66],{"class":65},[59,1147,70],{"class":69},[59,1149,74],{"class":73},[59,1151,77],{"class":65},[59,1153,81],{"class":80},[59,1155,843],{"class":84},[59,1157,1158,1160,1162],{"class":61,"line":153},[59,1159,848],{"class":192},[59,1161,352],{"class":73},[59,1163,178],{"class":84},[59,1165,1166,1169,1171,1173,1176,1179,1182,1184,1186],{"class":61,"line":199},[59,1167,1168],{"class":359},"    if",[59,1170,363],{"class":84},[59,1172,346],{"class":88},[59,1174,1175],{"class":84},"[",[59,1177,1178],{"class":994},"0",[59,1180,1181],{"class":84},"].",[59,1183,885],{"class":88},[59,1185,349],{"class":84},[59,1187,178],{"class":84},[59,1189,1190],{"class":61,"line":218},[59,1191,1192],{"class":404},"      // ...添加doms\n",[59,1194,1195],{"class":61,"line":232},[59,1196,958],{"class":84},[59,1198,1199],{"class":61,"line":246},[59,1200,963],{"class":84},[59,1202,1203],{"class":61,"line":261},[59,1204,968],{"class":84},[59,1206,1207,1209,1211,1213],{"class":61,"line":276},[59,1208,974],{"class":973},[59,1210,977],{"class":84},[59,1212,981],{"class":980},[59,1214,984],{"class":84},[59,1216,1217,1219,1221,1224,1226,1228],{"class":61,"line":291},[59,1218,989],{"class":973},[59,1220,977],{"class":84},[59,1222,1223],{"class":711}," '",[59,1225,1178],{"class":715},[59,1227,712],{"class":711},[59,1229,984],{"class":84},[59,1231,1232,1234,1236],{"class":61,"line":539},[59,1233,1002],{"class":973},[59,1235,977],{"class":84},[59,1237,1007],{"class":994},[59,1239,1240],{"class":61,"line":545},[59,1241,542],{"class":84},[59,1243,1244],{"class":61,"line":554},[59,1245,948],{"class":84},[59,1247,1248,1250,1253,1255,1257,1259,1262,1264,1266,1269,1271],{"class":61,"line":561},[59,1249,66],{"class":65},[59,1251,1252],{"class":69}," loading",[59,1254,74],{"class":73},[59,1256,1031],{"class":88},[59,1258,386],{"class":84},[59,1260,1261],{"class":80},"querySelector",[59,1263,85],{"class":84},[59,1265,712],{"class":711},[59,1267,1268],{"class":715},".loading",[59,1270,712],{"class":711},[59,1272,948],{"class":84},[59,1274,1275,1278,1280,1282,1284,1286],{"class":61,"line":567},[59,1276,1277],{"class":88},"ob",[59,1279,386],{"class":84},[59,1281,575],{"class":80},[59,1283,85],{"class":84},[59,1285,1129],{"class":88},[59,1287,948],{"class":84},[1289,1290,1291],"style",{},"html pre.shiki code .s8I54, html code.shiki .s8I54{--shiki-default:#F97583;--shiki-dark:#CB7676}html pre.shiki code .sXTEK, html code.shiki .sXTEK{--shiki-default:#79B8FF;--shiki-dark:#BD976A}html pre.shiki code .soRP2, html code.shiki .soRP2{--shiki-default:#F97583;--shiki-dark:#666666}html pre.shiki code .scd8n, html code.shiki .scd8n{--shiki-default:#B392F0;--shiki-dark:#80A665}html pre.shiki code .sybYZ, html code.shiki .sybYZ{--shiki-default:#E1E4E8;--shiki-dark:#666666}html pre.shiki code .sVbU4, html code.shiki .sVbU4{--shiki-default:#E1E4E8;--shiki-dark:#BD976A}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html pre.shiki code .s3iJD, html code.shiki .s3iJD{--shiki-default:#B392F0;--shiki-dark:#5DA994}html pre.shiki code .sSfpy, html code.shiki .sSfpy{--shiki-default:#FFAB70;--shiki-dark:#BD976A}html pre.shiki code .s3cgb, html code.shiki .s3cgb{--shiki-default:#E1E4E8;--shiki-dark:#DBD7CAEE}html pre.shiki code .scBr_, html code.shiki .scBr_{--shiki-default:#F97583;--shiki-dark:#4D9375}html pre.shiki code .sKXKF, html code.shiki .sKXKF{--shiki-default:#6A737D;--shiki-dark:#758575DD}html pre.shiki code .s-bR0, html code.shiki .s-bR0{--shiki-default:#85E89D;--shiki-dark:#4D9375}html pre.shiki code .skT8L, html code.shiki .skT8L{--shiki-default:#B392F0;--shiki-dark:#BD976A}html pre.shiki code .sajHj, html code.shiki .sajHj{--shiki-default:#9ECBFF;--shiki-dark:#C98A7D77}html pre.shiki code .sx1Rn, html code.shiki .sx1Rn{--shiki-default:#9ECBFF;--shiki-dark:#C98A7D}html pre.shiki code .sqmIX, html code.shiki .sqmIX{--shiki-default:#E1E4E8;--shiki-dark:#B8A965}html pre.shiki code .smuiB, html code.shiki .smuiB{--shiki-default:#79B8FF;--shiki-dark:#CB7676}html pre.shiki code .svno3, html code.shiki .svno3{--shiki-default:#79B8FF;--shiki-dark:#4C9A91}html pre.shiki code .sRd-J, html code.shiki .sRd-J{--shiki-default:#FDAEB7;--shiki-default-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:inherit}",{"title":25,"searchDepth":153,"depth":153,"links":1293},[1294,1295],{"id":681,"depth":153,"text":681},{"id":1088,"depth":153,"text":1088},"2025-04-29T00:00:00.000Z",null,"md",{},"/blog/202504/intersectionobserver-watch-dom","qingkun",{"title":5,"description":1297},"blog/202504/02.IntersectionObserver-watch-dom","zJcLa69yW7zzI412w92WdDXzQ3VKITAS6NQrb8Q0KvU",1746757448403]