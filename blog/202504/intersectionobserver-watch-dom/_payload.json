[{"data":1,"prerenderedAt":1319},["ShallowReactive",2],{"/blog/202504/intersectionobserver-watch-dom":3},{"id":4,"title":5,"body":6,"date":1310,"description":1311,"extension":1312,"image":1311,"meta":1313,"navigation":566,"path":1314,"qk":1315,"seo":1316,"stem":1317,"tags":1311,"__hash__":1318},"blog/blog/202504/02.IntersectionObserver-watch-dom.md","IntersectionObserver观察元素是否可见",{"type":7,"value":8,"toc":1302},"minimal",[9,13,18,22,29,33,53,103,160,166,169,304,331,665,672,675,684,688,692,829,1096,1099,1102,1147,1298],[10,11,5],"h1",{"id":12},"intersectionobserver观察元素是否可见",[14,15,17],"h2",{"id":16},"_1-说明","1. 说明",[19,20,21],"p",{},"网页开发时，常常需要了解某个元素是否进入了\"视口\"（viewport），即用户能不能看到它，IntersectionObserver API，可以自动\"观察\"元素是否可见，Chrome 51+ 已经支持。由于可见（visible）的本质是，目标元素与视口产生一个交叉区，所以这个 API 叫做\"交叉观察器\"。",[19,23,24],{},[25,26],"img",{"alt":27,"src":28},"intersection-observer-info","/blog/202504/intersection-observer-info.gif",[14,30,32],{"id":31},"_2-创建","2. 创建",[34,35,36],"ol",{},[37,38,39,40,44,45,48,49,52],"li",{},"创建一个 IntersectionObserver 对象，并传入相应参数和回调用函数，该回调函数将会在目标(",[41,42,43],"code",{},"target",")元素和根(",[41,46,47],{},"root",")元素的交集大小超过阈值(",[41,50,51],{},"threshold",")规定的大小时候被执行。",[54,55,60],"pre",{"className":56,"code":57,"language":58,"meta":59,"style":59},"language-js shiki shiki-themes github-dark vitesse-dark","const ob = new IntersectionObserver(callback, option)\n","js","",[41,61,62],{"__ignoreMap":59},[63,64,67,71,75,79,82,86,90,94,97,100],"span",{"class":65,"line":66},"line",1,[63,68,70],{"class":69},"s8I54","const",[63,72,74],{"class":73},"sXTEK"," ob",[63,76,78],{"class":77},"soRP2"," =",[63,80,81],{"class":69}," new",[63,83,85],{"class":84},"scd8n"," IntersectionObserver",[63,87,89],{"class":88},"sybYZ","(",[63,91,93],{"class":92},"sVbU4","callback",[63,95,96],{"class":88},",",[63,98,99],{"class":92}," option",[63,101,102],{"class":88},")\n",[104,105,106,114],"blockquote",{},[34,107,108,111],{},[37,109,110],{},"callback: 交叉改变后运行： 交叉/不交叉 => 不交叉/交叉",[37,112,113],{},"option: 配置项目",[115,116,117,129,146],"ul",{},[37,118,119,121,122,124,125,128],{},[41,120,47],{},": 指定根(",[41,123,47],{},")元素，用于检查目标的可见性。必须是目标元素的父级元素。如果未指定或者为",[41,126,127],{},"null","，则默认为浏览器视窗。",[37,130,131,134,135,137,138,141,142,145],{},[41,132,133],{},"rootMargin",": 根(",[41,136,47],{},")元素的外边距。类似于 CSS 中的 margin 属性，比如 \"10px 20px 30px 40px\" (top, right, bottom, left)。如果有指定 root 参数，则 rootMargin 也可以使用百分比来取值。该属性值是用作 root 元素和 target 发生交集时候的计算交集的区域范围，使用该属性可以控制 root 元素每一边的",[41,139,140],{},"收缩","或者",[41,143,144],{},"扩张","。默认值为 0。",[37,147,148,150,151,154,157,159],{},[41,149,51],{},": 阈值！可以是单一的 number 也可以是 number 数组，target 元素和 root 元素相交程度达到该值的时候 IntersectionObserver 注册的回调函数将会被执行。如果你只是想要探测当 target 元素的在 root 元素中的可见性超过 50%的时候，你可以指定该属性值为 0.5。如果你想要 target 元素在 root 元素的可见程度每多 25%就执行一次回调，那么你可以指定一个数组\n",[152,153],"br",{},[63,155,156],{},"0, 0.25, 0.5, 0.75, 1",[152,158],{},"\n。默认值是 0(意味着只要有一个 target 像素出现在 root 元素中，回调函数将会被执行)。该值为 1.0 含义是当 target 完全出现在 root 元素中时候 回调才会被执行。",[34,161,163],{"start":162},2,[37,164,165],{},"IntersectionObserver Entry",[19,167,168],{},"IntersectionObserverEntry 对象提供了目标元素与跟元素相交的详细信息。他有如下几个属性。",[54,170,174],{"className":171,"code":172,"language":173,"meta":59,"style":59},"language-typescript shiki shiki-themes github-dark vitesse-dark","interface IntersectionObserverEntry {\n  readonly attribute DOMHighResTimeStamp time;\n  readonly attribute DOMRectReadOnly? rootBounds;\n  readonly attribute DOMRectReadOnly boundingClientRect;\n  readonly attribute DOMRectReadOnly intersectionRect;\n  readonly attribute boolean isIntersecting;\n  readonly attribute double intersectionRatio;\n  readonly attribute Element target;\n};\n","typescript",[41,175,176,188,206,225,239,253,268,283,298],{"__ignoreMap":59},[63,177,178,181,185],{"class":65,"line":66},[63,179,180],{"class":69},"interface",[63,182,184],{"class":183},"s3iJD"," IntersectionObserverEntry",[63,186,187],{"class":88}," {\n",[63,189,190,193,196,199,203],{"class":65,"line":162},[63,191,192],{"class":69},"  readonly",[63,194,195],{"class":92}," attribute",[63,197,198],{"class":92}," DOMHighResTimeStamp",[63,200,202],{"class":201},"sSfpy"," time",[63,204,205],{"class":88},";\n",[63,207,209,211,213,216,219,222],{"class":65,"line":208},3,[63,210,192],{"class":69},[63,212,195],{"class":92},[63,214,215],{"class":92}," DOMRectReadOnly",[63,217,218],{"class":69},"?",[63,220,221],{"class":92}," rootBounds",[63,223,205],{"class":224},"s3cgb",[63,226,228,230,232,234,237],{"class":65,"line":227},4,[63,229,192],{"class":92},[63,231,195],{"class":92},[63,233,215],{"class":92},[63,235,236],{"class":92}," boundingClientRect",[63,238,205],{"class":224},[63,240,242,244,246,248,251],{"class":65,"line":241},5,[63,243,192],{"class":92},[63,245,195],{"class":92},[63,247,215],{"class":92},[63,249,250],{"class":92}," intersectionRect",[63,252,205],{"class":224},[63,254,256,258,260,263,266],{"class":65,"line":255},6,[63,257,192],{"class":92},[63,259,195],{"class":92},[63,261,262],{"class":92}," boolean",[63,264,265],{"class":92}," isIntersecting",[63,267,205],{"class":224},[63,269,271,273,275,278,281],{"class":65,"line":270},7,[63,272,192],{"class":92},[63,274,195],{"class":92},[63,276,277],{"class":92}," double",[63,279,280],{"class":92}," intersectionRatio",[63,282,205],{"class":224},[63,284,286,288,290,293,296],{"class":65,"line":285},8,[63,287,192],{"class":92},[63,289,195],{"class":92},[63,291,292],{"class":92}," Element",[63,294,295],{"class":92}," target",[63,297,205],{"class":224},[63,299,301],{"class":65,"line":300},9,[63,302,303],{"class":224},"};\n",[115,305,306,309,312,315,318,325,328],{},[37,307,308],{},"time：发生相交到相应的时间，毫秒。",[37,310,311],{},"rootBounds：根元素矩形区域的信息，如果没有设置根元素则返回 null，图中蓝色部分区域。",[37,313,314],{},"boundingClientRect：目标元素的矩形区域的信息，图中黑色边框的区域。",[37,316,317],{},"intersectionRect：目标元素与视口（或根元素）的交叉区域的信息，图中蓝色方块和粉红色方块相交的区域。",[37,319,320,321],{},"isIntersecting：",[322,323,324],"strong",{},"目标元素与根元素是否相交(满足预设的阈值条件)",[37,326,327],{},"intersectionRatio：目标元素与视口（或根元素）的相交比例。",[37,329,330],{},"target：目标元素，图中黑色边框的部分。",[54,332,334],{"className":56,"code":333,"language":58,"meta":59,"style":59},"var observer = new IntersectionObserver((entries) => {\n  for (const entry of entries) {\n    console.log(entry.time) // 发生变化的时间\n    console.log(entry.rootBounds) // 根元素的矩形区域的信息\n    console.log(entry.boundingClientRect) // 目标元素的矩形区域的信息\n    console.log(entry.isIntersection) // 目标元素与视口（或根元素）是否相交(满足预设的阈值条件)\n    console.log(entry.intersectionRect) // 目标元素与视口（或根元素）的交叉区域的信息\n    console.log(entry.intersectionRatio) // 目标元素与视口（或根元素）的相交比例\n    console.log(entry.target) // 被观察的目标元素\n  }\n}, {})\n\n// 开始观察某个目标元素\nobserver.observe(target)\n\n// 停止观察某个目标元素\nobserver.unobserve(target)\n\n// 关闭监视器\nobserver.disconnect()\n\n// 获取所有 IntersectionObserver 观察的 targets\nobserver.takeRecords()\n",[41,335,336,364,388,415,437,459,481,503,525,546,552,561,568,574,591,596,602,618,623,629,642,647,653],{"__ignoreMap":59},[63,337,338,341,344,346,348,350,353,356,359,362],{"class":65,"line":66},[63,339,340],{"class":69},"var",[63,342,343],{"class":92}," observer",[63,345,78],{"class":77},[63,347,81],{"class":69},[63,349,85],{"class":84},[63,351,352],{"class":88},"((",[63,354,355],{"class":201},"entries",[63,357,358],{"class":88},")",[63,360,361],{"class":77}," =>",[63,363,187],{"class":88},[63,365,366,370,373,375,378,381,384,386],{"class":65,"line":162},[63,367,369],{"class":368},"scBr_","  for",[63,371,372],{"class":88}," (",[63,374,70],{"class":69},[63,376,377],{"class":73}," entry",[63,379,380],{"class":69}," of",[63,382,383],{"class":92}," entries",[63,385,358],{"class":88},[63,387,187],{"class":88},[63,389,390,393,396,399,401,404,406,409,411],{"class":65,"line":208},[63,391,392],{"class":92},"    console",[63,394,395],{"class":88},".",[63,397,398],{"class":84},"log",[63,400,89],{"class":88},[63,402,403],{"class":92},"entry",[63,405,395],{"class":88},[63,407,408],{"class":92},"time",[63,410,358],{"class":88},[63,412,414],{"class":413},"sKXKF"," // 发生变化的时间\n",[63,416,417,419,421,423,425,427,429,432,434],{"class":65,"line":227},[63,418,392],{"class":92},[63,420,395],{"class":88},[63,422,398],{"class":84},[63,424,89],{"class":88},[63,426,403],{"class":92},[63,428,395],{"class":88},[63,430,431],{"class":92},"rootBounds",[63,433,358],{"class":88},[63,435,436],{"class":413}," // 根元素的矩形区域的信息\n",[63,438,439,441,443,445,447,449,451,454,456],{"class":65,"line":241},[63,440,392],{"class":92},[63,442,395],{"class":88},[63,444,398],{"class":84},[63,446,89],{"class":88},[63,448,403],{"class":92},[63,450,395],{"class":88},[63,452,453],{"class":92},"boundingClientRect",[63,455,358],{"class":88},[63,457,458],{"class":413}," // 目标元素的矩形区域的信息\n",[63,460,461,463,465,467,469,471,473,476,478],{"class":65,"line":255},[63,462,392],{"class":92},[63,464,395],{"class":88},[63,466,398],{"class":84},[63,468,89],{"class":88},[63,470,403],{"class":92},[63,472,395],{"class":88},[63,474,475],{"class":92},"isIntersection",[63,477,358],{"class":88},[63,479,480],{"class":413}," // 目标元素与视口（或根元素）是否相交(满足预设的阈值条件)\n",[63,482,483,485,487,489,491,493,495,498,500],{"class":65,"line":270},[63,484,392],{"class":92},[63,486,395],{"class":88},[63,488,398],{"class":84},[63,490,89],{"class":88},[63,492,403],{"class":92},[63,494,395],{"class":88},[63,496,497],{"class":92},"intersectionRect",[63,499,358],{"class":88},[63,501,502],{"class":413}," // 目标元素与视口（或根元素）的交叉区域的信息\n",[63,504,505,507,509,511,513,515,517,520,522],{"class":65,"line":285},[63,506,392],{"class":92},[63,508,395],{"class":88},[63,510,398],{"class":84},[63,512,89],{"class":88},[63,514,403],{"class":92},[63,516,395],{"class":88},[63,518,519],{"class":92},"intersectionRatio",[63,521,358],{"class":88},[63,523,524],{"class":413}," // 目标元素与视口（或根元素）的相交比例\n",[63,526,527,529,531,533,535,537,539,541,543],{"class":65,"line":300},[63,528,392],{"class":92},[63,530,395],{"class":88},[63,532,398],{"class":84},[63,534,89],{"class":88},[63,536,403],{"class":92},[63,538,395],{"class":88},[63,540,43],{"class":92},[63,542,358],{"class":88},[63,544,545],{"class":413}," // 被观察的目标元素\n",[63,547,549],{"class":65,"line":548},10,[63,550,551],{"class":88},"  }\n",[63,553,555,558],{"class":65,"line":554},11,[63,556,557],{"class":88},"},",[63,559,560],{"class":88}," {})\n",[63,562,564],{"class":65,"line":563},12,[63,565,567],{"emptyLinePlaceholder":566},true,"\n",[63,569,571],{"class":65,"line":570},13,[63,572,573],{"class":413},"// 开始观察某个目标元素\n",[63,575,577,580,582,585,587,589],{"class":65,"line":576},14,[63,578,579],{"class":92},"observer",[63,581,395],{"class":88},[63,583,584],{"class":84},"observe",[63,586,89],{"class":88},[63,588,43],{"class":92},[63,590,102],{"class":88},[63,592,594],{"class":65,"line":593},15,[63,595,567],{"emptyLinePlaceholder":566},[63,597,599],{"class":65,"line":598},16,[63,600,601],{"class":413},"// 停止观察某个目标元素\n",[63,603,605,607,609,612,614,616],{"class":65,"line":604},17,[63,606,579],{"class":92},[63,608,395],{"class":88},[63,610,611],{"class":84},"unobserve",[63,613,89],{"class":88},[63,615,43],{"class":92},[63,617,102],{"class":88},[63,619,621],{"class":65,"line":620},18,[63,622,567],{"emptyLinePlaceholder":566},[63,624,626],{"class":65,"line":625},19,[63,627,628],{"class":413},"// 关闭监视器\n",[63,630,632,634,636,639],{"class":65,"line":631},20,[63,633,579],{"class":92},[63,635,395],{"class":88},[63,637,638],{"class":84},"disconnect",[63,640,641],{"class":88},"()\n",[63,643,645],{"class":65,"line":644},21,[63,646,567],{"emptyLinePlaceholder":566},[63,648,650],{"class":65,"line":649},22,[63,651,652],{"class":413},"// 获取所有 IntersectionObserver 观察的 targets\n",[63,654,656,658,660,663],{"class":65,"line":655},23,[63,657,579],{"class":92},[63,659,395],{"class":88},[63,661,662],{"class":84},"takeRecords",[63,664,641],{"class":88},[19,666,667,668,671],{},"请留意，你注册的回调函数将会在主线程中被执行。所以该函数执行速度要尽可能的快。如果有一些耗时的操作需要执行，建议使用 ",[41,669,670],{},"Window.requestIdleCallback()"," 方法。",[19,673,674],{},"所有区域均被 Intersection Observer API 当做一个矩形看待。如果元素是不规则的图形也将会被看成一个包含元素所有区域的最小矩形，相似的，如果元素发生的交集部分不是一个矩形，那么也会被看作是一个包含他所有交集区域的最小矩形。",[19,676,677,678,680,681,683],{},"这个有助于理解 IntersectionObserverEntry 的属性，IntersectionObserverEntry 用于描述 ",[41,679,43],{}," 和 ",[41,682,47],{}," 的交集。",[14,685,687],{"id":686},"_3-应用","3. 应用",[689,690,691],"h3",{"id":691},"图片懒加载",[54,693,697],{"className":694,"code":695,"language":696,"meta":59,"style":59},"language-html shiki shiki-themes github-dark vitesse-dark","\u003C!-- html -->\n\u003Cimg src='default.png' data-src=\"xxxxx\" />\n\u003Cimg src='default.png' data-src=\"xxxxx\" />\n\u003Cimg src='default.png' data-src=\"xxxxx\" />\n\u003Cimg src='default.png' data-src=\"xxxxx\" />\n","html",[41,698,699,704,745,773,801],{"__ignoreMap":59},[63,700,701],{"class":65,"line":66},[63,702,703],{"class":413},"\u003C!-- html -->\n",[63,705,706,709,712,716,719,723,727,729,732,734,737,740,742],{"class":65,"line":162},[63,707,708],{"class":88},"\u003C",[63,710,25],{"class":711},"s-bR0",[63,713,715],{"class":714},"skT8L"," src",[63,717,718],{"class":88},"=",[63,720,722],{"class":721},"sajHj","'",[63,724,726],{"class":725},"sx1Rn","default.png",[63,728,722],{"class":721},[63,730,731],{"class":714}," data-src",[63,733,718],{"class":88},[63,735,736],{"class":721},"\"",[63,738,739],{"class":725},"xxxxx",[63,741,736],{"class":721},[63,743,744],{"class":88}," />\n",[63,746,747,749,751,753,755,757,759,761,763,765,767,769,771],{"class":65,"line":208},[63,748,708],{"class":88},[63,750,25],{"class":711},[63,752,715],{"class":714},[63,754,718],{"class":88},[63,756,722],{"class":721},[63,758,726],{"class":725},[63,760,722],{"class":721},[63,762,731],{"class":714},[63,764,718],{"class":88},[63,766,736],{"class":721},[63,768,739],{"class":725},[63,770,736],{"class":721},[63,772,744],{"class":88},[63,774,775,777,779,781,783,785,787,789,791,793,795,797,799],{"class":65,"line":227},[63,776,708],{"class":88},[63,778,25],{"class":711},[63,780,715],{"class":714},[63,782,718],{"class":88},[63,784,722],{"class":721},[63,786,726],{"class":725},[63,788,722],{"class":721},[63,790,731],{"class":714},[63,792,718],{"class":88},[63,794,736],{"class":721},[63,796,739],{"class":725},[63,798,736],{"class":721},[63,800,744],{"class":88},[63,802,803,805,807,809,811,813,815,817,819,821,823,825,827],{"class":65,"line":241},[63,804,708],{"class":88},[63,806,25],{"class":711},[63,808,715],{"class":714},[63,810,718],{"class":88},[63,812,722],{"class":721},[63,814,726],{"class":725},[63,816,722],{"class":721},[63,818,731],{"class":714},[63,820,718],{"class":88},[63,822,736],{"class":721},[63,824,739],{"class":725},[63,826,736],{"class":721},[63,828,744],{"class":88},[54,830,832],{"className":56,"code":831,"language":58,"meta":59,"style":59},"// js\nconst ob = new IntersectionObserver(\n  entries => {\n    for (const entry of entries) {\n      if (entry.isIntersecting) {\n        const img = entry.target;\n        img.src = img.dataset.src;\n        ob.unobserve(img);\n      }\n    }\n  },\n  {\n    root: null,\n    rootMargin: 0,\n    threshold: 0\n  }\n);\n\nconst imgs = document.querySelectorAll('img[data-src]')\nimgs.forEach(img => {\n  ob.observe(img)\n})\n",[41,833,834,839,854,863,882,900,918,943,959,964,969,974,979,995,1008,1018,1022,1026,1030,1058,1076,1091],{"__ignoreMap":59},[63,835,836],{"class":65,"line":66},[63,837,838],{"class":413},"// js\n",[63,840,841,843,845,847,849,851],{"class":65,"line":162},[63,842,70],{"class":69},[63,844,74],{"class":73},[63,846,78],{"class":77},[63,848,81],{"class":69},[63,850,85],{"class":84},[63,852,853],{"class":88},"(\n",[63,855,856,859,861],{"class":65,"line":208},[63,857,858],{"class":201},"  entries",[63,860,361],{"class":77},[63,862,187],{"class":88},[63,864,865,868,870,872,874,876,878,880],{"class":65,"line":227},[63,866,867],{"class":368},"    for",[63,869,372],{"class":88},[63,871,70],{"class":69},[63,873,377],{"class":73},[63,875,380],{"class":69},[63,877,383],{"class":92},[63,879,358],{"class":88},[63,881,187],{"class":88},[63,883,884,887,889,891,893,896,898],{"class":65,"line":241},[63,885,886],{"class":368},"      if",[63,888,372],{"class":88},[63,890,403],{"class":92},[63,892,395],{"class":88},[63,894,895],{"class":92},"isIntersecting",[63,897,358],{"class":88},[63,899,187],{"class":88},[63,901,902,905,908,910,912,914,916],{"class":65,"line":255},[63,903,904],{"class":69},"        const",[63,906,907],{"class":73}," img",[63,909,78],{"class":77},[63,911,377],{"class":92},[63,913,395],{"class":88},[63,915,43],{"class":92},[63,917,205],{"class":88},[63,919,920,923,925,928,930,932,934,937,939,941],{"class":65,"line":270},[63,921,922],{"class":92},"        img",[63,924,395],{"class":88},[63,926,927],{"class":92},"src",[63,929,78],{"class":77},[63,931,907],{"class":92},[63,933,395],{"class":88},[63,935,936],{"class":92},"dataset",[63,938,395],{"class":88},[63,940,927],{"class":92},[63,942,205],{"class":88},[63,944,945,948,950,952,954,956],{"class":65,"line":285},[63,946,947],{"class":92},"        ob",[63,949,395],{"class":88},[63,951,611],{"class":84},[63,953,89],{"class":88},[63,955,25],{"class":92},[63,957,958],{"class":88},");\n",[63,960,961],{"class":65,"line":300},[63,962,963],{"class":88},"      }\n",[63,965,966],{"class":65,"line":548},[63,967,968],{"class":88},"    }\n",[63,970,971],{"class":65,"line":554},[63,972,973],{"class":88},"  },\n",[63,975,976],{"class":65,"line":563},[63,977,978],{"class":88},"  {\n",[63,980,981,985,988,992],{"class":65,"line":570},[63,982,984],{"class":983},"sqmIX","    root",[63,986,987],{"class":88},":",[63,989,991],{"class":990},"smuiB"," null",[63,993,994],{"class":88},",\n",[63,996,997,1000,1002,1006],{"class":65,"line":576},[63,998,999],{"class":983},"    rootMargin",[63,1001,987],{"class":88},[63,1003,1005],{"class":1004},"svno3"," 0",[63,1007,994],{"class":88},[63,1009,1010,1013,1015],{"class":65,"line":593},[63,1011,1012],{"class":983},"    threshold",[63,1014,987],{"class":88},[63,1016,1017],{"class":1004}," 0\n",[63,1019,1020],{"class":65,"line":598},[63,1021,551],{"class":88},[63,1023,1024],{"class":65,"line":604},[63,1025,958],{"class":88},[63,1027,1028],{"class":65,"line":620},[63,1029,567],{"emptyLinePlaceholder":566},[63,1031,1032,1034,1037,1039,1042,1044,1047,1049,1051,1054,1056],{"class":65,"line":625},[63,1033,70],{"class":69},[63,1035,1036],{"class":73}," imgs",[63,1038,78],{"class":77},[63,1040,1041],{"class":92}," document",[63,1043,395],{"class":88},[63,1045,1046],{"class":84},"querySelectorAll",[63,1048,89],{"class":88},[63,1050,722],{"class":721},[63,1052,1053],{"class":725},"img[data-src]",[63,1055,722],{"class":721},[63,1057,102],{"class":88},[63,1059,1060,1063,1065,1068,1070,1072,1074],{"class":65,"line":631},[63,1061,1062],{"class":92},"imgs",[63,1064,395],{"class":88},[63,1066,1067],{"class":84},"forEach",[63,1069,89],{"class":88},[63,1071,25],{"class":201},[63,1073,361],{"class":77},[63,1075,187],{"class":88},[63,1077,1078,1081,1083,1085,1087,1089],{"class":65,"line":644},[63,1079,1080],{"class":92},"  ob",[63,1082,395],{"class":88},[63,1084,584],{"class":84},[63,1086,89],{"class":88},[63,1088,25],{"class":92},[63,1090,102],{"class":88},[63,1092,1093],{"class":65,"line":649},[63,1094,1095],{"class":88},"})\n",[689,1097,1098],{"id":1098},"下拉加载更多",[19,1100,1101],{},"方式：在dom元素之下存在一个加载动画。当加载动画出现在视口中，继续添加dom元素",[54,1103,1105],{"className":694,"code":1104,"language":696,"meta":59,"style":59},"  \u003Cdiv>\n    // 省略其他dom元素...\n  \u003C/div>\n  \u003Cloading>\u003C/loading>\n",[41,1106,1107,1118,1123,1132],{"__ignoreMap":59},[63,1108,1109,1112,1115],{"class":65,"line":66},[63,1110,1111],{"class":88},"  \u003C",[63,1113,1114],{"class":711},"div",[63,1116,1117],{"class":88},">\n",[63,1119,1120],{"class":65,"line":162},[63,1121,1122],{"class":224},"    // 省略其他dom元素...\n",[63,1124,1125,1128,1130],{"class":65,"line":208},[63,1126,1127],{"class":88},"  \u003C/",[63,1129,1114],{"class":711},[63,1131,1117],{"class":88},[63,1133,1134,1136,1140,1143,1145],{"class":65,"line":227},[63,1135,1111],{"class":88},[63,1137,1139],{"class":1138},"sRd-J","loading",[63,1141,1142],{"class":88},">\u003C/",[63,1144,1139],{"class":1138},[63,1146,1117],{"class":88},[54,1148,1150],{"className":56,"code":1149,"language":58,"meta":59,"style":59},"const ob = new IntersectionObserver(\n  entries => {\n    if (entries[0].isIntersecting) {\n      // ...添加doms\n    }\n  },\n  {\n    root: null,\n    rootMargin: '0',\n    threshold: 0\n  }\n);\nconst loading = document.querySelector('.loading');\nob.observe(loading);\n",[41,1151,1152,1166,1174,1198,1203,1207,1211,1215,1225,1240,1248,1252,1256,1283],{"__ignoreMap":59},[63,1153,1154,1156,1158,1160,1162,1164],{"class":65,"line":66},[63,1155,70],{"class":69},[63,1157,74],{"class":73},[63,1159,78],{"class":77},[63,1161,81],{"class":69},[63,1163,85],{"class":84},[63,1165,853],{"class":88},[63,1167,1168,1170,1172],{"class":65,"line":162},[63,1169,858],{"class":201},[63,1171,361],{"class":77},[63,1173,187],{"class":88},[63,1175,1176,1179,1181,1183,1186,1189,1192,1194,1196],{"class":65,"line":208},[63,1177,1178],{"class":368},"    if",[63,1180,372],{"class":88},[63,1182,355],{"class":92},[63,1184,1185],{"class":88},"[",[63,1187,1188],{"class":1004},"0",[63,1190,1191],{"class":88},"].",[63,1193,895],{"class":92},[63,1195,358],{"class":88},[63,1197,187],{"class":88},[63,1199,1200],{"class":65,"line":227},[63,1201,1202],{"class":413},"      // ...添加doms\n",[63,1204,1205],{"class":65,"line":241},[63,1206,968],{"class":88},[63,1208,1209],{"class":65,"line":255},[63,1210,973],{"class":88},[63,1212,1213],{"class":65,"line":270},[63,1214,978],{"class":88},[63,1216,1217,1219,1221,1223],{"class":65,"line":285},[63,1218,984],{"class":983},[63,1220,987],{"class":88},[63,1222,991],{"class":990},[63,1224,994],{"class":88},[63,1226,1227,1229,1231,1234,1236,1238],{"class":65,"line":300},[63,1228,999],{"class":983},[63,1230,987],{"class":88},[63,1232,1233],{"class":721}," '",[63,1235,1188],{"class":725},[63,1237,722],{"class":721},[63,1239,994],{"class":88},[63,1241,1242,1244,1246],{"class":65,"line":548},[63,1243,1012],{"class":983},[63,1245,987],{"class":88},[63,1247,1017],{"class":1004},[63,1249,1250],{"class":65,"line":554},[63,1251,551],{"class":88},[63,1253,1254],{"class":65,"line":563},[63,1255,958],{"class":88},[63,1257,1258,1260,1263,1265,1267,1269,1272,1274,1276,1279,1281],{"class":65,"line":570},[63,1259,70],{"class":69},[63,1261,1262],{"class":73}," loading",[63,1264,78],{"class":77},[63,1266,1041],{"class":92},[63,1268,395],{"class":88},[63,1270,1271],{"class":84},"querySelector",[63,1273,89],{"class":88},[63,1275,722],{"class":721},[63,1277,1278],{"class":725},".loading",[63,1280,722],{"class":721},[63,1282,958],{"class":88},[63,1284,1285,1288,1290,1292,1294,1296],{"class":65,"line":576},[63,1286,1287],{"class":92},"ob",[63,1289,395],{"class":88},[63,1291,584],{"class":84},[63,1293,89],{"class":88},[63,1295,1139],{"class":92},[63,1297,958],{"class":88},[1299,1300,1301],"style",{},"html pre.shiki code .s8I54, html code.shiki .s8I54{--shiki-default:#F97583;--shiki-dark:#CB7676}html pre.shiki code .sXTEK, html code.shiki .sXTEK{--shiki-default:#79B8FF;--shiki-dark:#BD976A}html pre.shiki code .soRP2, html code.shiki .soRP2{--shiki-default:#F97583;--shiki-dark:#666666}html pre.shiki code .scd8n, html code.shiki .scd8n{--shiki-default:#B392F0;--shiki-dark:#80A665}html pre.shiki code .sybYZ, html code.shiki .sybYZ{--shiki-default:#E1E4E8;--shiki-dark:#666666}html pre.shiki code .sVbU4, html code.shiki .sVbU4{--shiki-default:#E1E4E8;--shiki-dark:#BD976A}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html pre.shiki code .s3iJD, html code.shiki .s3iJD{--shiki-default:#B392F0;--shiki-dark:#5DA994}html pre.shiki code .sSfpy, html code.shiki .sSfpy{--shiki-default:#FFAB70;--shiki-dark:#BD976A}html pre.shiki code .s3cgb, html code.shiki .s3cgb{--shiki-default:#E1E4E8;--shiki-dark:#DBD7CAEE}html pre.shiki code .scBr_, html code.shiki .scBr_{--shiki-default:#F97583;--shiki-dark:#4D9375}html pre.shiki code .sKXKF, html code.shiki .sKXKF{--shiki-default:#6A737D;--shiki-dark:#758575DD}html pre.shiki code .s-bR0, html code.shiki .s-bR0{--shiki-default:#85E89D;--shiki-dark:#4D9375}html pre.shiki code .skT8L, html code.shiki .skT8L{--shiki-default:#B392F0;--shiki-dark:#BD976A}html pre.shiki code .sajHj, html code.shiki .sajHj{--shiki-default:#9ECBFF;--shiki-dark:#C98A7D77}html pre.shiki code .sx1Rn, html code.shiki .sx1Rn{--shiki-default:#9ECBFF;--shiki-dark:#C98A7D}html pre.shiki code .sqmIX, html code.shiki .sqmIX{--shiki-default:#E1E4E8;--shiki-dark:#B8A965}html pre.shiki code .smuiB, html code.shiki .smuiB{--shiki-default:#79B8FF;--shiki-dark:#CB7676}html pre.shiki code .svno3, html code.shiki .svno3{--shiki-default:#79B8FF;--shiki-dark:#4C9A91}html pre.shiki code .sRd-J, html code.shiki .sRd-J{--shiki-default:#FDAEB7;--shiki-default-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:inherit}",{"title":59,"searchDepth":162,"depth":162,"links":1303},[1304,1305,1306],{"id":16,"depth":162,"text":17},{"id":31,"depth":162,"text":32},{"id":686,"depth":162,"text":687,"children":1307},[1308,1309],{"id":691,"depth":208,"text":691},{"id":1098,"depth":208,"text":1098},"2025-04-29T00:00:00.000Z",null,"md",{},"/blog/202504/intersectionobserver-watch-dom","qingkun",{"title":5,"description":1311},"blog/202504/02.IntersectionObserver-watch-dom","OSSX8TZJWas3ti-Fw12JuMI4YCNDBSBiXPZfCa0J-zA",1746762409092]