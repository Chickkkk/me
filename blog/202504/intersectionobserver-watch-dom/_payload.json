[{"data":1,"prerenderedAt":1313},["ShallowReactive",2],{"/blog/202504/intersectionobserver-watch-dom":3},{"id":4,"title":5,"body":6,"date":1304,"description":1305,"extension":1306,"image":1305,"meta":1307,"navigation":560,"path":1308,"qk":1309,"seo":1310,"stem":1311,"tags":1305,"__hash__":1312},"blog/blog/202504/02.IntersectionObserver-watch-dom.md","IntersectionObserver观察元素是否可见",{"type":7,"value":8,"toc":1296},"minimal",[9,13,18,22,29,33,53,102,154,160,163,298,325,659,666,669,678,682,686,823,1090,1093,1096,1141,1292],[10,11,5],"h1",{"id":12},"intersectionobserver观察元素是否可见",[14,15,17],"h2",{"id":16},"_1-说明","1. 说明",[19,20,21],"p",{},"网页开发时，常常需要了解某个元素是否进入了\"视口\"（viewport），即用户能不能看到它，IntersectionObserver API，可以自动\"观察\"元素是否可见，Chrome 51+ 已经支持。由于可见（visible）的本质是，目标元素与视口产生一个交叉区，所以这个 API 叫做\"交叉观察器\"。",[19,23,24],{},[25,26],"img",{"alt":27,"src":28},"","https://cloud.qkun.fun/fun/article/1746428536211001.gif",[14,30,32],{"id":31},"_2-创建","2. 创建",[34,35,36],"ol",{},[37,38,39,40,44,45,48,49,52],"li",{},"创建一个 IntersectionObserver 对象，并传入相应参数和回调用函数，该回调函数将会在目标(",[41,42,43],"code",{},"target",")元素和根(",[41,46,47],{},"root",")元素的交集大小超过阈值(",[41,50,51],{},"threshold",")规定的大小时候被执行。",[54,55,59],"pre",{"className":56,"code":57,"language":58,"meta":27,"style":27},"language-js shiki shiki-themes github-dark vitesse-dark","const ob = new IntersectionObserver(callback, option)\n","js",[41,60,61],{"__ignoreMap":27},[62,63,66,70,74,78,81,85,89,93,96,99],"span",{"class":64,"line":65},"line",1,[62,67,69],{"class":68},"s8I54","const",[62,71,73],{"class":72},"sXTEK"," ob",[62,75,77],{"class":76},"soRP2"," =",[62,79,80],{"class":68}," new",[62,82,84],{"class":83},"scd8n"," IntersectionObserver",[62,86,88],{"class":87},"sybYZ","(",[62,90,92],{"class":91},"sVbU4","callback",[62,94,95],{"class":87},",",[62,97,98],{"class":91}," option",[62,100,101],{"class":87},")\n",[103,104,105,113],"blockquote",{},[34,106,107,110],{},[37,108,109],{},"callback: 交叉改变后运行： 交叉/不交叉 => 不交叉/交叉",[37,111,112],{},"option: 配置项目",[114,115,116,128,145],"ul",{},[37,117,118,120,121,123,124,127],{},[41,119,47],{},": 指定根(",[41,122,47],{},")元素，用于检查目标的可见性。必须是目标元素的父级元素。如果未指定或者为",[41,125,126],{},"null","，则默认为浏览器视窗。",[37,129,130,133,134,136,137,140,141,144],{},[41,131,132],{},"rootMargin",": 根(",[41,135,47],{},")元素的外边距。类似于 CSS 中的 margin 属性，比如 \"10px 20px 30px 40px\" (top, right, bottom, left)。如果有指定 root 参数，则 rootMargin 也可以使用百分比来取值。该属性值是用作 root 元素和 target 发生交集时候的计算交集的区域范围，使用该属性可以控制 root 元素每一边的",[41,138,139],{},"收缩","或者",[41,142,143],{},"扩张","。默认值为 0。",[37,146,147,149,150,153],{},[41,148,51],{},": 阈值！可以是单一的 number 也可以是 number 数组，target 元素和 root 元素相交程度达到该值的时候 IntersectionObserver 注册的回调函数将会被执行。如果你只是想要探测当 target 元素的在 root 元素中的可见性超过 50%的时候，你可以指定该属性值为 0.5。如果你想要 target 元素在 root 元素的可见程度每多 25%就执行一次回调，那么你可以指定一个数组\n",[62,151,152],{},"0, 0.25, 0.5, 0.75, 1","\n。默认值是 0(意味着只要有一个 target 像素出现在 root 元素中，回调函数将会被执行)。该值为 1.0 含义是当 target 完全出现在 root 元素中时候 回调才会被执行。",[34,155,157],{"start":156},2,[37,158,159],{},"IntersectionObserver Entry",[19,161,162],{},"IntersectionObserverEntry 对象提供了目标元素与跟元素相交的详细信息。他有如下几个属性。",[54,164,168],{"className":165,"code":166,"language":167,"meta":27,"style":27},"language-typescript shiki shiki-themes github-dark vitesse-dark","interface IntersectionObserverEntry {\n  readonly attribute DOMHighResTimeStamp time;\n  readonly attribute DOMRectReadOnly? rootBounds;\n  readonly attribute DOMRectReadOnly boundingClientRect;\n  readonly attribute DOMRectReadOnly intersectionRect;\n  readonly attribute boolean isIntersecting;\n  readonly attribute double intersectionRatio;\n  readonly attribute Element target;\n};\n","typescript",[41,169,170,182,200,219,233,247,262,277,292],{"__ignoreMap":27},[62,171,172,175,179],{"class":64,"line":65},[62,173,174],{"class":68},"interface",[62,176,178],{"class":177},"s3iJD"," IntersectionObserverEntry",[62,180,181],{"class":87}," {\n",[62,183,184,187,190,193,197],{"class":64,"line":156},[62,185,186],{"class":68},"  readonly",[62,188,189],{"class":91}," attribute",[62,191,192],{"class":91}," DOMHighResTimeStamp",[62,194,196],{"class":195},"sSfpy"," time",[62,198,199],{"class":87},";\n",[62,201,203,205,207,210,213,216],{"class":64,"line":202},3,[62,204,186],{"class":68},[62,206,189],{"class":91},[62,208,209],{"class":91}," DOMRectReadOnly",[62,211,212],{"class":68},"?",[62,214,215],{"class":91}," rootBounds",[62,217,199],{"class":218},"s3cgb",[62,220,222,224,226,228,231],{"class":64,"line":221},4,[62,223,186],{"class":91},[62,225,189],{"class":91},[62,227,209],{"class":91},[62,229,230],{"class":91}," boundingClientRect",[62,232,199],{"class":218},[62,234,236,238,240,242,245],{"class":64,"line":235},5,[62,237,186],{"class":91},[62,239,189],{"class":91},[62,241,209],{"class":91},[62,243,244],{"class":91}," intersectionRect",[62,246,199],{"class":218},[62,248,250,252,254,257,260],{"class":64,"line":249},6,[62,251,186],{"class":91},[62,253,189],{"class":91},[62,255,256],{"class":91}," boolean",[62,258,259],{"class":91}," isIntersecting",[62,261,199],{"class":218},[62,263,265,267,269,272,275],{"class":64,"line":264},7,[62,266,186],{"class":91},[62,268,189],{"class":91},[62,270,271],{"class":91}," double",[62,273,274],{"class":91}," intersectionRatio",[62,276,199],{"class":218},[62,278,280,282,284,287,290],{"class":64,"line":279},8,[62,281,186],{"class":91},[62,283,189],{"class":91},[62,285,286],{"class":91}," Element",[62,288,289],{"class":91}," target",[62,291,199],{"class":218},[62,293,295],{"class":64,"line":294},9,[62,296,297],{"class":218},"};\n",[114,299,300,303,306,309,312,319,322],{},[37,301,302],{},"time：发生相交到相应的时间，毫秒。",[37,304,305],{},"rootBounds：根元素矩形区域的信息，如果没有设置根元素则返回 null，图中蓝色部分区域。",[37,307,308],{},"boundingClientRect：目标元素的矩形区域的信息，图中黑色边框的区域。",[37,310,311],{},"intersectionRect：目标元素与视口（或根元素）的交叉区域的信息，图中蓝色方块和粉红色方块相交的区域。",[37,313,314,315],{},"isIntersecting：",[316,317,318],"strong",{},"目标元素与根元素是否相交(满足预设的阈值条件)",[37,320,321],{},"intersectionRatio：目标元素与视口（或根元素）的相交比例。",[37,323,324],{},"target：目标元素，图中黑色边框的部分。",[54,326,328],{"className":56,"code":327,"language":58,"meta":27,"style":27},"var observer = new IntersectionObserver((entries) => {\n  for (const entry of entries) {\n    console.log(entry.time) // 发生变化的时间\n    console.log(entry.rootBounds) // 根元素的矩形区域的信息\n    console.log(entry.boundingClientRect) // 目标元素的矩形区域的信息\n    console.log(entry.isIntersection) // 目标元素与视口（或根元素）是否相交(满足预设的阈值条件)\n    console.log(entry.intersectionRect) // 目标元素与视口（或根元素）的交叉区域的信息\n    console.log(entry.intersectionRatio) // 目标元素与视口（或根元素）的相交比例\n    console.log(entry.target) // 被观察的目标元素\n  }\n}, {})\n\n// 开始观察某个目标元素\nobserver.observe(target)\n\n// 停止观察某个目标元素\nobserver.unobserve(target)\n\n// 关闭监视器\nobserver.disconnect()\n\n// 获取所有 IntersectionObserver 观察的 targets\nobserver.takeRecords()\n",[41,329,330,358,382,409,431,453,475,497,519,540,546,555,562,568,585,590,596,612,617,623,636,641,647],{"__ignoreMap":27},[62,331,332,335,338,340,342,344,347,350,353,356],{"class":64,"line":65},[62,333,334],{"class":68},"var",[62,336,337],{"class":91}," observer",[62,339,77],{"class":76},[62,341,80],{"class":68},[62,343,84],{"class":83},[62,345,346],{"class":87},"((",[62,348,349],{"class":195},"entries",[62,351,352],{"class":87},")",[62,354,355],{"class":76}," =>",[62,357,181],{"class":87},[62,359,360,364,367,369,372,375,378,380],{"class":64,"line":156},[62,361,363],{"class":362},"scBr_","  for",[62,365,366],{"class":87}," (",[62,368,69],{"class":68},[62,370,371],{"class":72}," entry",[62,373,374],{"class":68}," of",[62,376,377],{"class":91}," entries",[62,379,352],{"class":87},[62,381,181],{"class":87},[62,383,384,387,390,393,395,398,400,403,405],{"class":64,"line":202},[62,385,386],{"class":91},"    console",[62,388,389],{"class":87},".",[62,391,392],{"class":83},"log",[62,394,88],{"class":87},[62,396,397],{"class":91},"entry",[62,399,389],{"class":87},[62,401,402],{"class":91},"time",[62,404,352],{"class":87},[62,406,408],{"class":407},"sKXKF"," // 发生变化的时间\n",[62,410,411,413,415,417,419,421,423,426,428],{"class":64,"line":221},[62,412,386],{"class":91},[62,414,389],{"class":87},[62,416,392],{"class":83},[62,418,88],{"class":87},[62,420,397],{"class":91},[62,422,389],{"class":87},[62,424,425],{"class":91},"rootBounds",[62,427,352],{"class":87},[62,429,430],{"class":407}," // 根元素的矩形区域的信息\n",[62,432,433,435,437,439,441,443,445,448,450],{"class":64,"line":235},[62,434,386],{"class":91},[62,436,389],{"class":87},[62,438,392],{"class":83},[62,440,88],{"class":87},[62,442,397],{"class":91},[62,444,389],{"class":87},[62,446,447],{"class":91},"boundingClientRect",[62,449,352],{"class":87},[62,451,452],{"class":407}," // 目标元素的矩形区域的信息\n",[62,454,455,457,459,461,463,465,467,470,472],{"class":64,"line":249},[62,456,386],{"class":91},[62,458,389],{"class":87},[62,460,392],{"class":83},[62,462,88],{"class":87},[62,464,397],{"class":91},[62,466,389],{"class":87},[62,468,469],{"class":91},"isIntersection",[62,471,352],{"class":87},[62,473,474],{"class":407}," // 目标元素与视口（或根元素）是否相交(满足预设的阈值条件)\n",[62,476,477,479,481,483,485,487,489,492,494],{"class":64,"line":264},[62,478,386],{"class":91},[62,480,389],{"class":87},[62,482,392],{"class":83},[62,484,88],{"class":87},[62,486,397],{"class":91},[62,488,389],{"class":87},[62,490,491],{"class":91},"intersectionRect",[62,493,352],{"class":87},[62,495,496],{"class":407}," // 目标元素与视口（或根元素）的交叉区域的信息\n",[62,498,499,501,503,505,507,509,511,514,516],{"class":64,"line":279},[62,500,386],{"class":91},[62,502,389],{"class":87},[62,504,392],{"class":83},[62,506,88],{"class":87},[62,508,397],{"class":91},[62,510,389],{"class":87},[62,512,513],{"class":91},"intersectionRatio",[62,515,352],{"class":87},[62,517,518],{"class":407}," // 目标元素与视口（或根元素）的相交比例\n",[62,520,521,523,525,527,529,531,533,535,537],{"class":64,"line":294},[62,522,386],{"class":91},[62,524,389],{"class":87},[62,526,392],{"class":83},[62,528,88],{"class":87},[62,530,397],{"class":91},[62,532,389],{"class":87},[62,534,43],{"class":91},[62,536,352],{"class":87},[62,538,539],{"class":407}," // 被观察的目标元素\n",[62,541,543],{"class":64,"line":542},10,[62,544,545],{"class":87},"  }\n",[62,547,549,552],{"class":64,"line":548},11,[62,550,551],{"class":87},"},",[62,553,554],{"class":87}," {})\n",[62,556,558],{"class":64,"line":557},12,[62,559,561],{"emptyLinePlaceholder":560},true,"\n",[62,563,565],{"class":64,"line":564},13,[62,566,567],{"class":407},"// 开始观察某个目标元素\n",[62,569,571,574,576,579,581,583],{"class":64,"line":570},14,[62,572,573],{"class":91},"observer",[62,575,389],{"class":87},[62,577,578],{"class":83},"observe",[62,580,88],{"class":87},[62,582,43],{"class":91},[62,584,101],{"class":87},[62,586,588],{"class":64,"line":587},15,[62,589,561],{"emptyLinePlaceholder":560},[62,591,593],{"class":64,"line":592},16,[62,594,595],{"class":407},"// 停止观察某个目标元素\n",[62,597,599,601,603,606,608,610],{"class":64,"line":598},17,[62,600,573],{"class":91},[62,602,389],{"class":87},[62,604,605],{"class":83},"unobserve",[62,607,88],{"class":87},[62,609,43],{"class":91},[62,611,101],{"class":87},[62,613,615],{"class":64,"line":614},18,[62,616,561],{"emptyLinePlaceholder":560},[62,618,620],{"class":64,"line":619},19,[62,621,622],{"class":407},"// 关闭监视器\n",[62,624,626,628,630,633],{"class":64,"line":625},20,[62,627,573],{"class":91},[62,629,389],{"class":87},[62,631,632],{"class":83},"disconnect",[62,634,635],{"class":87},"()\n",[62,637,639],{"class":64,"line":638},21,[62,640,561],{"emptyLinePlaceholder":560},[62,642,644],{"class":64,"line":643},22,[62,645,646],{"class":407},"// 获取所有 IntersectionObserver 观察的 targets\n",[62,648,650,652,654,657],{"class":64,"line":649},23,[62,651,573],{"class":91},[62,653,389],{"class":87},[62,655,656],{"class":83},"takeRecords",[62,658,635],{"class":87},[19,660,661,662,665],{},"请留意，你注册的回调函数将会在主线程中被执行。所以该函数执行速度要尽可能的快。如果有一些耗时的操作需要执行，建议使用 ",[41,663,664],{},"Window.requestIdleCallback()"," 方法。",[19,667,668],{},"所有区域均被 Intersection Observer API 当做一个矩形看待。如果元素是不规则的图形也将会被看成一个包含元素所有区域的最小矩形，相似的，如果元素发生的交集部分不是一个矩形，那么也会被看作是一个包含他所有交集区域的最小矩形。",[19,670,671,672,674,675,677],{},"这个有助于理解 IntersectionObserverEntry 的属性，IntersectionObserverEntry 用于描述 ",[41,673,43],{}," 和 ",[41,676,47],{}," 的交集。",[14,679,681],{"id":680},"_3-应用","3. 应用",[683,684,685],"h3",{"id":685},"图片懒加载",[54,687,691],{"className":688,"code":689,"language":690,"meta":27,"style":27},"language-html shiki shiki-themes github-dark vitesse-dark","\u003C!-- html -->\n\u003Cimg src='default.png' data-src=\"xxxxx\" />\n\u003Cimg src='default.png' data-src=\"xxxxx\" />\n\u003Cimg src='default.png' data-src=\"xxxxx\" />\n\u003Cimg src='default.png' data-src=\"xxxxx\" />\n","html",[41,692,693,698,739,767,795],{"__ignoreMap":27},[62,694,695],{"class":64,"line":65},[62,696,697],{"class":407},"\u003C!-- html -->\n",[62,699,700,703,706,710,713,717,721,723,726,728,731,734,736],{"class":64,"line":156},[62,701,702],{"class":87},"\u003C",[62,704,25],{"class":705},"s-bR0",[62,707,709],{"class":708},"skT8L"," src",[62,711,712],{"class":87},"=",[62,714,716],{"class":715},"sajHj","'",[62,718,720],{"class":719},"sx1Rn","default.png",[62,722,716],{"class":715},[62,724,725],{"class":708}," data-src",[62,727,712],{"class":87},[62,729,730],{"class":715},"\"",[62,732,733],{"class":719},"xxxxx",[62,735,730],{"class":715},[62,737,738],{"class":87}," />\n",[62,740,741,743,745,747,749,751,753,755,757,759,761,763,765],{"class":64,"line":202},[62,742,702],{"class":87},[62,744,25],{"class":705},[62,746,709],{"class":708},[62,748,712],{"class":87},[62,750,716],{"class":715},[62,752,720],{"class":719},[62,754,716],{"class":715},[62,756,725],{"class":708},[62,758,712],{"class":87},[62,760,730],{"class":715},[62,762,733],{"class":719},[62,764,730],{"class":715},[62,766,738],{"class":87},[62,768,769,771,773,775,777,779,781,783,785,787,789,791,793],{"class":64,"line":221},[62,770,702],{"class":87},[62,772,25],{"class":705},[62,774,709],{"class":708},[62,776,712],{"class":87},[62,778,716],{"class":715},[62,780,720],{"class":719},[62,782,716],{"class":715},[62,784,725],{"class":708},[62,786,712],{"class":87},[62,788,730],{"class":715},[62,790,733],{"class":719},[62,792,730],{"class":715},[62,794,738],{"class":87},[62,796,797,799,801,803,805,807,809,811,813,815,817,819,821],{"class":64,"line":235},[62,798,702],{"class":87},[62,800,25],{"class":705},[62,802,709],{"class":708},[62,804,712],{"class":87},[62,806,716],{"class":715},[62,808,720],{"class":719},[62,810,716],{"class":715},[62,812,725],{"class":708},[62,814,712],{"class":87},[62,816,730],{"class":715},[62,818,733],{"class":719},[62,820,730],{"class":715},[62,822,738],{"class":87},[54,824,826],{"className":56,"code":825,"language":58,"meta":27,"style":27},"// js\nconst ob = new IntersectionObserver(\n  entries => {\n    for (const entry of entries) {\n      if (entry.isIntersecting) {\n        const img = entry.target;\n        img.src = img.dataset.src;\n        ob.unobserve(img);\n      }\n    }\n  },\n  {\n    root: null,\n    rootMargin: 0,\n    threshold: 0\n  }\n);\n\nconst imgs = document.querySelectorAll('img[data-src]')\nimgs.forEach(img => {\n  ob.observe(img)\n})\n",[41,827,828,833,848,857,876,894,912,937,953,958,963,968,973,989,1002,1012,1016,1020,1024,1052,1070,1085],{"__ignoreMap":27},[62,829,830],{"class":64,"line":65},[62,831,832],{"class":407},"// js\n",[62,834,835,837,839,841,843,845],{"class":64,"line":156},[62,836,69],{"class":68},[62,838,73],{"class":72},[62,840,77],{"class":76},[62,842,80],{"class":68},[62,844,84],{"class":83},[62,846,847],{"class":87},"(\n",[62,849,850,853,855],{"class":64,"line":202},[62,851,852],{"class":195},"  entries",[62,854,355],{"class":76},[62,856,181],{"class":87},[62,858,859,862,864,866,868,870,872,874],{"class":64,"line":221},[62,860,861],{"class":362},"    for",[62,863,366],{"class":87},[62,865,69],{"class":68},[62,867,371],{"class":72},[62,869,374],{"class":68},[62,871,377],{"class":91},[62,873,352],{"class":87},[62,875,181],{"class":87},[62,877,878,881,883,885,887,890,892],{"class":64,"line":235},[62,879,880],{"class":362},"      if",[62,882,366],{"class":87},[62,884,397],{"class":91},[62,886,389],{"class":87},[62,888,889],{"class":91},"isIntersecting",[62,891,352],{"class":87},[62,893,181],{"class":87},[62,895,896,899,902,904,906,908,910],{"class":64,"line":249},[62,897,898],{"class":68},"        const",[62,900,901],{"class":72}," img",[62,903,77],{"class":76},[62,905,371],{"class":91},[62,907,389],{"class":87},[62,909,43],{"class":91},[62,911,199],{"class":87},[62,913,914,917,919,922,924,926,928,931,933,935],{"class":64,"line":264},[62,915,916],{"class":91},"        img",[62,918,389],{"class":87},[62,920,921],{"class":91},"src",[62,923,77],{"class":76},[62,925,901],{"class":91},[62,927,389],{"class":87},[62,929,930],{"class":91},"dataset",[62,932,389],{"class":87},[62,934,921],{"class":91},[62,936,199],{"class":87},[62,938,939,942,944,946,948,950],{"class":64,"line":279},[62,940,941],{"class":91},"        ob",[62,943,389],{"class":87},[62,945,605],{"class":83},[62,947,88],{"class":87},[62,949,25],{"class":91},[62,951,952],{"class":87},");\n",[62,954,955],{"class":64,"line":294},[62,956,957],{"class":87},"      }\n",[62,959,960],{"class":64,"line":542},[62,961,962],{"class":87},"    }\n",[62,964,965],{"class":64,"line":548},[62,966,967],{"class":87},"  },\n",[62,969,970],{"class":64,"line":557},[62,971,972],{"class":87},"  {\n",[62,974,975,979,982,986],{"class":64,"line":564},[62,976,978],{"class":977},"sqmIX","    root",[62,980,981],{"class":87},":",[62,983,985],{"class":984},"smuiB"," null",[62,987,988],{"class":87},",\n",[62,990,991,994,996,1000],{"class":64,"line":570},[62,992,993],{"class":977},"    rootMargin",[62,995,981],{"class":87},[62,997,999],{"class":998},"svno3"," 0",[62,1001,988],{"class":87},[62,1003,1004,1007,1009],{"class":64,"line":587},[62,1005,1006],{"class":977},"    threshold",[62,1008,981],{"class":87},[62,1010,1011],{"class":998}," 0\n",[62,1013,1014],{"class":64,"line":592},[62,1015,545],{"class":87},[62,1017,1018],{"class":64,"line":598},[62,1019,952],{"class":87},[62,1021,1022],{"class":64,"line":614},[62,1023,561],{"emptyLinePlaceholder":560},[62,1025,1026,1028,1031,1033,1036,1038,1041,1043,1045,1048,1050],{"class":64,"line":619},[62,1027,69],{"class":68},[62,1029,1030],{"class":72}," imgs",[62,1032,77],{"class":76},[62,1034,1035],{"class":91}," document",[62,1037,389],{"class":87},[62,1039,1040],{"class":83},"querySelectorAll",[62,1042,88],{"class":87},[62,1044,716],{"class":715},[62,1046,1047],{"class":719},"img[data-src]",[62,1049,716],{"class":715},[62,1051,101],{"class":87},[62,1053,1054,1057,1059,1062,1064,1066,1068],{"class":64,"line":625},[62,1055,1056],{"class":91},"imgs",[62,1058,389],{"class":87},[62,1060,1061],{"class":83},"forEach",[62,1063,88],{"class":87},[62,1065,25],{"class":195},[62,1067,355],{"class":76},[62,1069,181],{"class":87},[62,1071,1072,1075,1077,1079,1081,1083],{"class":64,"line":638},[62,1073,1074],{"class":91},"  ob",[62,1076,389],{"class":87},[62,1078,578],{"class":83},[62,1080,88],{"class":87},[62,1082,25],{"class":91},[62,1084,101],{"class":87},[62,1086,1087],{"class":64,"line":643},[62,1088,1089],{"class":87},"})\n",[683,1091,1092],{"id":1092},"下拉加载更多",[19,1094,1095],{},"方式：在dom元素之下存在一个加载动画。当加载动画出现在视口中，继续添加dom元素",[54,1097,1099],{"className":688,"code":1098,"language":690,"meta":27,"style":27},"  \u003Cdiv>\n    // 省略其他dom元素...\n  \u003C/div>\n  \u003Cloading>\u003C/loading>\n",[41,1100,1101,1112,1117,1126],{"__ignoreMap":27},[62,1102,1103,1106,1109],{"class":64,"line":65},[62,1104,1105],{"class":87},"  \u003C",[62,1107,1108],{"class":705},"div",[62,1110,1111],{"class":87},">\n",[62,1113,1114],{"class":64,"line":156},[62,1115,1116],{"class":218},"    // 省略其他dom元素...\n",[62,1118,1119,1122,1124],{"class":64,"line":202},[62,1120,1121],{"class":87},"  \u003C/",[62,1123,1108],{"class":705},[62,1125,1111],{"class":87},[62,1127,1128,1130,1134,1137,1139],{"class":64,"line":221},[62,1129,1105],{"class":87},[62,1131,1133],{"class":1132},"sRd-J","loading",[62,1135,1136],{"class":87},">\u003C/",[62,1138,1133],{"class":1132},[62,1140,1111],{"class":87},[54,1142,1144],{"className":56,"code":1143,"language":58,"meta":27,"style":27},"const ob = new IntersectionObserver(\n  entries => {\n    if (entries[0].isIntersecting) {\n      // ...添加doms\n    }\n  },\n  {\n    root: null,\n    rootMargin: '0',\n    threshold: 0\n  }\n);\nconst loading = document.querySelector('.loading');\nob.observe(loading);\n",[41,1145,1146,1160,1168,1192,1197,1201,1205,1209,1219,1234,1242,1246,1250,1277],{"__ignoreMap":27},[62,1147,1148,1150,1152,1154,1156,1158],{"class":64,"line":65},[62,1149,69],{"class":68},[62,1151,73],{"class":72},[62,1153,77],{"class":76},[62,1155,80],{"class":68},[62,1157,84],{"class":83},[62,1159,847],{"class":87},[62,1161,1162,1164,1166],{"class":64,"line":156},[62,1163,852],{"class":195},[62,1165,355],{"class":76},[62,1167,181],{"class":87},[62,1169,1170,1173,1175,1177,1180,1183,1186,1188,1190],{"class":64,"line":202},[62,1171,1172],{"class":362},"    if",[62,1174,366],{"class":87},[62,1176,349],{"class":91},[62,1178,1179],{"class":87},"[",[62,1181,1182],{"class":998},"0",[62,1184,1185],{"class":87},"].",[62,1187,889],{"class":91},[62,1189,352],{"class":87},[62,1191,181],{"class":87},[62,1193,1194],{"class":64,"line":221},[62,1195,1196],{"class":407},"      // ...添加doms\n",[62,1198,1199],{"class":64,"line":235},[62,1200,962],{"class":87},[62,1202,1203],{"class":64,"line":249},[62,1204,967],{"class":87},[62,1206,1207],{"class":64,"line":264},[62,1208,972],{"class":87},[62,1210,1211,1213,1215,1217],{"class":64,"line":279},[62,1212,978],{"class":977},[62,1214,981],{"class":87},[62,1216,985],{"class":984},[62,1218,988],{"class":87},[62,1220,1221,1223,1225,1228,1230,1232],{"class":64,"line":294},[62,1222,993],{"class":977},[62,1224,981],{"class":87},[62,1226,1227],{"class":715}," '",[62,1229,1182],{"class":719},[62,1231,716],{"class":715},[62,1233,988],{"class":87},[62,1235,1236,1238,1240],{"class":64,"line":542},[62,1237,1006],{"class":977},[62,1239,981],{"class":87},[62,1241,1011],{"class":998},[62,1243,1244],{"class":64,"line":548},[62,1245,545],{"class":87},[62,1247,1248],{"class":64,"line":557},[62,1249,952],{"class":87},[62,1251,1252,1254,1257,1259,1261,1263,1266,1268,1270,1273,1275],{"class":64,"line":564},[62,1253,69],{"class":68},[62,1255,1256],{"class":72}," loading",[62,1258,77],{"class":76},[62,1260,1035],{"class":91},[62,1262,389],{"class":87},[62,1264,1265],{"class":83},"querySelector",[62,1267,88],{"class":87},[62,1269,716],{"class":715},[62,1271,1272],{"class":719},".loading",[62,1274,716],{"class":715},[62,1276,952],{"class":87},[62,1278,1279,1282,1284,1286,1288,1290],{"class":64,"line":570},[62,1280,1281],{"class":91},"ob",[62,1283,389],{"class":87},[62,1285,578],{"class":83},[62,1287,88],{"class":87},[62,1289,1133],{"class":91},[62,1291,952],{"class":87},[1293,1294,1295],"style",{},"html pre.shiki code .s8I54, html code.shiki .s8I54{--shiki-default:#F97583;--shiki-dark:#CB7676}html pre.shiki code .sXTEK, html code.shiki .sXTEK{--shiki-default:#79B8FF;--shiki-dark:#BD976A}html pre.shiki code .soRP2, html code.shiki .soRP2{--shiki-default:#F97583;--shiki-dark:#666666}html pre.shiki code .scd8n, html code.shiki .scd8n{--shiki-default:#B392F0;--shiki-dark:#80A665}html pre.shiki code .sybYZ, html code.shiki .sybYZ{--shiki-default:#E1E4E8;--shiki-dark:#666666}html pre.shiki code .sVbU4, html code.shiki .sVbU4{--shiki-default:#E1E4E8;--shiki-dark:#BD976A}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html pre.shiki code .s3iJD, html code.shiki .s3iJD{--shiki-default:#B392F0;--shiki-dark:#5DA994}html pre.shiki code .sSfpy, html code.shiki .sSfpy{--shiki-default:#FFAB70;--shiki-dark:#BD976A}html pre.shiki code .s3cgb, html code.shiki .s3cgb{--shiki-default:#E1E4E8;--shiki-dark:#DBD7CAEE}html pre.shiki code .scBr_, html code.shiki .scBr_{--shiki-default:#F97583;--shiki-dark:#4D9375}html pre.shiki code .sKXKF, html code.shiki .sKXKF{--shiki-default:#6A737D;--shiki-dark:#758575DD}html pre.shiki code .s-bR0, html code.shiki .s-bR0{--shiki-default:#85E89D;--shiki-dark:#4D9375}html pre.shiki code .skT8L, html code.shiki .skT8L{--shiki-default:#B392F0;--shiki-dark:#BD976A}html pre.shiki code .sajHj, html code.shiki .sajHj{--shiki-default:#9ECBFF;--shiki-dark:#C98A7D77}html pre.shiki code .sx1Rn, html code.shiki .sx1Rn{--shiki-default:#9ECBFF;--shiki-dark:#C98A7D}html pre.shiki code .sqmIX, html code.shiki .sqmIX{--shiki-default:#E1E4E8;--shiki-dark:#B8A965}html pre.shiki code .smuiB, html code.shiki .smuiB{--shiki-default:#79B8FF;--shiki-dark:#CB7676}html pre.shiki code .svno3, html code.shiki .svno3{--shiki-default:#79B8FF;--shiki-dark:#4C9A91}html pre.shiki code .sRd-J, html code.shiki .sRd-J{--shiki-default:#FDAEB7;--shiki-default-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:inherit}",{"title":27,"searchDepth":156,"depth":156,"links":1297},[1298,1299,1300],{"id":16,"depth":156,"text":17},{"id":31,"depth":156,"text":32},{"id":680,"depth":156,"text":681,"children":1301},[1302,1303],{"id":685,"depth":202,"text":685},{"id":1092,"depth":202,"text":1092},"2025-04-29T00:00:00.000Z",null,"md",{},"/blog/202504/intersectionobserver-watch-dom","qingkun",{"title":5,"description":1305},"blog/202504/02.IntersectionObserver-watch-dom","HkANBVn_IGqL2jaqNd679mycGDyG9mfUOYoJOlAVFAo",1746758021245]